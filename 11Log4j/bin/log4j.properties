# 我们需要实例化一个类  ConsoleAppender
# ConsoleAppender console=new   ConsoleAppender();  创建对象
# 调用对象的属性或者方法赋值    console.set属性 
#log4j.appender 前缀 我们一般不改变
#console 只是一个变量名  随意！
log4j.appender.console=org.apache.log4j.ConsoleAppender
log4j.appender.console.Target=System.out
#实例化一个Layout对象  因为Layout是一个抽象类
#所以我们实例化一个Layout的子类即可
log4j.appender.console.Layout=org.apache.log4j.PatternLayout
#%d 日期  %c 类class %l 行号 line  %m错误信息 message    %n  换行  newLine   
log4j.appender.console.Layout.ConversionPattern=%d{yyyy-MM-dd hh:mm:ss}  %c  %l  %m  %n


#  把日志信息打印在文件中
log4j.appender.file=org.apache.log4j.RollingFileAppender
# 文件的存放位置
log4j.appender.file.File=e\:/log/log4j.log  
# 每个文件的最大容量
log4j.appender.file.MaxFileSize=1kb 
# 如果超过了大小  默认产生的额外文件的数量
log4j.appender.file.MaxBackupIndex=3
# 设置内容满了 之后是否覆盖之前的内容
log4j.appender.file.Append=true
log4j.appender.file.Layout=org.apache.log4j.PatternLayout
log4j.appender.file.Layout.ConversionPattern=%d{yyyy-MM-dd hh:mm:ss}  %c  %l  %m  %n


#使用log4j.rootLogger=级别,变量1,变量2．．．
#级别　必须　位于第一个位置　　变量1,变量2　位置可以互换
log4j.rootLogger=trace,console,file


#每分钟生成一个新文件
log4j.appender.file2=org.apache.log4j.DailyRollingFileAppender  
log4j.appender.file2.Append=true  
log4j.appender.file2.DatePattern='_' yyyy-MM-dd-mm  
log4j.appender.file2.File=c:/logs/message2.log  
log4j.appender.file2.Threshold=debug  
log4j.appender.file2.Layout=org.apache.log4j.PatternLayout  
log4j.appender.file2.Layout.ConversionPattern=%d{yyyy-MM-dd HH:mm:ss} %c %l %m %n  





                                 